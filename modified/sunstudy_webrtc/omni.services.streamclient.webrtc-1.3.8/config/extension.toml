[package]
title = "Livestream WebRTC Client"
description = "Livestream WebRTC client running a single-page web application."
version = "1.3.8"
category = "services"
authors = ["NVIDIA"]
repository = ""
preview_image = "data/preview.png"
icon = "data/icon.png"
keywords = ["kit", "streaming", "webrtc", "js", "livestream", "client"]
changelog = "docs/CHANGELOG.md"
readme = "docs/README.md"

[dependencies]
"omni.kit.livestream.core" = {}
"omni.kit.livestream.webrtc" = {}
"omni.services.core" = {}
"omni.services.streaming.manager" = {}
"omni.services.transport.server.http" = {}

[[python.module]]
name = "omni.services.streamclient.webrtc"

[settings]
app.livestream.proto = "ws"
app.window.drawMouse = false

#exts."omni.services.streamclient.webrtc".window.width = 1280
#exts."omni.services.streamclient.webrtc".window.height = 1020

[settings.exts."omni.services.streamclient.webrtc"]
# List of available STUN and TURN servers to use when negotiating a WebRTC connection.
#
# Supported properties for each entry are:
#   * `urls` (required): List of URLs for the STUN or TURN server (including the `stun:`, `turn:` or `turns:` prefix).
#   * `username` (optional): Username to use to authenticate against the server.
#   * `credential` (optional): Password to use to authenticate against the server.
#
# We provide a list of public distributed servers kindly made available by Google
# (https://cloud.google.com/architecture/gpu-accelerated-streaming-using-webrtc#network_traversal). Users are encouraged
# to provide their own, and to supply their own TURN servers.
ice_servers = [
    { urls = [
        "stun:stun.l.google.com:19302",
        "stun:stun.l.google.com:19305",
        "stun:stun1.l.google.com:19302",
        "stun:stun1.l.google.com:19305",
        "stun:stun2.l.google.com:19302",
        "stun:stun2.l.google.com:19305",
        "stun:stun3.l.google.com:19302",
        "stun:stun3.l.google.com:19305",
        "stun:stun4.l.google.com:19302",
        "stun:stun4.l.google.com:19305",
    ] },
]

[[test]]
# Work around issue with `AsyncEngineDriver` not shutting down properly on
# Windows by providing a unique HTTP port for the test runners:
args = [
    "--exts/omni.services.transport.server.http/port=8045",
]
dependencies = [
    "omni.services.client",
    "omni.services.transport.client.http_async",
]
stdoutFailPatterns.exclude = [
    "*<class 'omni.kit.async_engine.async_engine._AsyncEngineDriver'>: extension object is still alive*",
    "*<class 'omni.kit.menu.utils.scripts.utils.MenuUtilsExtension'>: extension object is still alive*",
    "*[error]*",  # Exclude until Kit 104.0 SDK issue is fixed.
]
